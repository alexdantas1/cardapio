<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Controle de Combustível</title>
    <style>
        body {
            font-family: Arial, sans-serif;
            background-color: #000;
            color: #ccc;
            margin: 0;
            padding: 0;
        }

        .container {
            max-width: 800px;
            margin: 50px auto;
            padding: 20px;
            background-color: #333;
            box-shadow: 0 0 10px rgba(0, 0, 0, 0.5);
            position: relative;
        }

        h1, h2 {
            text-align: center;
            color: #0f0;
        }

        form {
            display: flex;
            flex-direction: column;
            gap: 10px;
        }

        label {
            font-weight: bold;
            color: #0f0;
        }

        input, button {
            padding: 10px;
            font-size: 16px;
            border: none;
            border-radius: 5px;
        }

        input {
            background-color: #444;
            color: #0f0;
        }

        button {
            background-color: #007BFF;
            color: #fff;
            cursor: pointer;
        }

        button:hover {
            background-color: #0056b3;
        }

        table {
            width: 100%;
            border-collapse: collapse;
            margin-top: 20px;
            overflow-x: auto;
        }

        th, td {
            padding: 10px;
            border: 1px solid #555;
            text-align: center;
        }

        th {
            background-color: #444;
            color: #0f0;
        }

        .settings {
            display: flex;
            justify-content: space-between;
            margin-top: 20px;
        }

        .clock {
            font-size: 14px;
            color: #0f0;
            position: absolute;
            top: 10px;
            right: 10px;
            background-color: #007BFF;
            padding: 5px 10px;
            border-radius: 5px;
            box-shadow: 0 0 5px rgba(0, 0, 0, 0.5);
        }

        .clear-manual {
            background-color: #FF0000;
            color: #fff;
            border: none;
            padding: 10px;
            cursor: pointer;
            border-radius: 5px;
        }

        .clear-manual:hover {
            background-color: #cc0000;
        }

        @media (max-width: 600px) {
            .container {
                padding: 10px;
            }

            input, button {
                font-size: 14px;
                padding: 8px;
            }

            th, td {
                padding: 8px;
            }

            .clock {
                font-size: 12px;
                padding: 3px 6px;
            }

            .settings {
                flex-direction: column;
                gap: 10px;
            }

            .settings button, .settings input {
                width: 100%;
            }

            table {
                font-size: 12px;
            }
        }
    </style>
</head>
<body>
    <div class="container">
        <h1>Controle de Combustível</h1>
        <form id="fuel-form">
            <label for="date">Data:</label>
            <input type="date" id="date" required>
            
            <label for="liters">Litros Abastecidos:</label>
            <input type="number" id="liters" step="0.01" required>
            
            <label for="odometer">Quilometragem do Velocímetro:</label>
            <input type="number" id="odometer" step="0.1" required>
            
            <label for="price">Preço da Gasolina (R$):</label>
            <input type="number" id="price" step="0.01" required>
            
            <button type="submit">Adicionar</button>
        </form>
        <div class="settings">
            <button id="clear-data">Alterar Dias de Retenção</button>
            <input type="number" id="days" placeholder="Dias" min="1" style="width: 100px;">
            <button class="clear-manual" id="clear-manual">Limpar Registros</button>
        </div>
        <h2>Histórico de Abastecimentos</h2>
        <table id="fuel-table">
            <thead>
                <tr>
                    <th>Data</th>
                    <th>Litros</th>
                    <th>Quilometragem</th>
                    <th>Km Rodados</th>
                    <th>Km/L</th>
                    <th>Preço (R$)</th>
                    <th>Custo Total (R$)</th>
                </tr>
            </thead>
            <tbody>
                <!-- Registros serão adicionados aqui -->
            </tbody>
        </table>
        <div class="clock" id="clock"></div>
        <div class="filter">
            <label for="month">Filtrar por Mês:</label>
            <input type="month" id="month">
            <button id="filter-month">Filtrar</button>
            <div id="monthly-total"></div>
        </div>
    </div>
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const fuelForm = document.getElementById('fuel-form');
            const fuelTableBody = document.querySelector('#fuel-table tbody');
            const clearDataButton = document.getElementById('clear-data');
            const daysInput = document.getElementById('days');
            const clockElement = document.getElementById('clock');
            const clearManualButton = document.getElementById('clear-manual');
            const filterMonthButton = document.getElementById('filter-month');
            const monthInput = document.getElementById('month');
            const monthlyTotalElement = document.getElementById('monthly-total');

            // Carregar dados do localStorage
            const fuelData = JSON.parse(localStorage.getItem('fuelData')) || [];
            let monthlyTotal = parseFloat(localStorage.getItem('monthlyTotal')) || 0;

            // Função para atualizar a tabela
            function updateTable() {
                fuelTableBody.innerHTML = '';
                fuelData.forEach((entry, index) => {
                    const kmRodados = index === 0 ? 0 : entry.odometer - fuelData[index - 1].odometer;
                    const kmPorLitro = kmRodados > 0 ? (kmRodados / entry.liters).toFixed(2) : 'N/A';
                    const custoTotal = (entry.liters * entry.price).toFixed(2);
                    const row = document.createElement('tr');
                    row.innerHTML = `
                        <td>${entry.date}</td>
                        <td>${entry.liters}</td>
                        <td>${entry.odometer}</td>
                        <td>${kmRodados}</td>
                        <td>${kmPorLitro}</td>
                        <td>${entry.price}</td>
                        <td>${custoTotal}</td>
                    `;
                    fuelTableBody.appendChild(row);
                });
            }

            // Atualizar a tabela ao carregar a página
            updateTable();

            // Adicionar novo registro
            fuelForm.addEventListener('submit', (e) => {
                e.preventDefault();
                const date = document.getElementById('date').value;
                const liters = parseFloat(document.getElementById('liters').value);
                const odometer = parseFloat(document.getElementById('odometer').value);
                const price = parseFloat(document.getElementById('price').value);

                const newEntry = { date, liters, odometer, price };
                fuelData.push(newEntry);

                // Atualizar total mensal
                const entryDate = new Date(date);
                const now = new Date();
                if (entryDate.getMonth() === now.getMonth() && entryDate.getFullYear() === now.getFullYear()) {
                    monthlyTotal += liters;
                    localStorage.setItem('monthlyTotal', monthlyTotal.toFixed(2));
                }

                // Salvar no localStorage
                localStorage.setItem('fuelData', JSON.stringify(fuelData));

                // Atualizar a tabela
                updateTable();

                // Limpar o formulário
                fuelForm.reset();
            });

            // Função para limpar dados antigos
            clearDataButton.addEventListener('click', () => {
                const days = parseInt(daysInput.value);
                if (isNaN(days) || days < 1) {
                    alert('Por favor, insira um número válido de dias.');
                    return;
                }
                const now = new Date();
                const filteredData = fuelData.filter(entry => {
                    const entryDate = new Date(entry.date);
                    const diffTime = Math.abs(now - entryDate);
                    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
                    return diffDays <= days;
                });
                localStorage.setItem('fuelData',
